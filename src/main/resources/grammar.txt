# ! means that the token or rule is required, so the parser throws an error if it cannot be matched.
# ? means that the token or rule is optional
# * means that the token or rule can be repeated zero or more times
# Use parentheses to create sub expressions

entry ::= function*
function ::= "fn" id! "("! (parameter ("," parameter!)* )? ")"! ("->" type!)? expression!
parameter ::= id ":"! type!



expression ::= define | conditionalOrExpression
define ::= "let" id! "="! expression!


conditionalOrExpression ::= conditionalAndExpression ("||" conditionalOrExpression!)?
conditionalAndExpression ::= equalityExpression ("&&" conditionalAndExpression!)?
equalityExpression ::= relationalExpression (("==" | "!=") equalityExpression!)?
relationalExpression ::= additiveExpression (("<" | ">" | "<=" | ">=") relationalExpression!)?
additiveExpression ::= multiplicativeExpression (("+" | "-") additiveExpression!)?
multiplicativeExpression ::= unaryExpression (("*" | "/" | "%") multiplicativeExpression!)?
unaryExpression ::= ("+" | "-" | "!") factor! | factor
factor ::= object postFix*

object ::= ifElse | block | id | number | "(" expression! ")"!

ifElse ::= "if" expression! block! elsePart?
elsePart ::= "else" block!
block ::= "{" expression* "}"!


postFix ::= call | "." id!
call ::= "(" (argument ("," argument)* )? ")"!
argument ::= (id ":")? expression


type ::= id
id ::= "word"
number ::= "number"